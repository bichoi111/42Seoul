4. strstr(s1,s2)는 s2문자열이 s1에 있는지 찾아서 있으면 일치하는 단어의 시작주소를 반환한다.
   일치하지 않으면 널문자 반환, s2가 비어있으면 s1반환.
	1) 일치하는 주소값 저장할 변수 tmp
	2) s2가 널문자인지 확인하는 작업
	3) 그 다음에는 이제 s1문자열이 끝날 때까지 s2가 있는지 찾아볼거임
	4) 만일 s1의 값과 s2의 값이 같으면, s2문자열과 일치하는 문자열이 s1에있을지도 모르니
	   일단 tmp에 첫 주소값을 저장하고, 그 다음 단어들도 다 일치하는지 확인하는 작업.
	5) 다 확인을 했는데 s2의 값이 0이라면 s2의단어가 다 일치했다는 뜻이므로 주소값을 반환.
	6) 아니면 str값만 +1 !!!! 나는 처음에 s1과 s2를 동시에 다 +1해서 이상했었음.
	   동시에 카운팅하는거는 첫번째 글자가 일치했을때 그 다음 글자들이 일치하는지 확인할때!
	   문자열에서 특정 단어를 찾는건데 동시에 인덱스 0부터 비교하는건..
	   "hey cat" 에서 "cat"을 찾을려 할 때, 동시에 index 0부터 비교하면 널값 나올 것!

5. Strlcat 
	*src != 0 조건을 안주면 계속 카운트 됨. i가 주어진 조건을 만족하지 않을 때 까지 계속
	카운트 되는데, 우리는 src 문자열 끝까지만 연결하면 되므로 이 조건을 줌.

